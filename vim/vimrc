" per project configuration
set exrc
set secure

" vim ftw
set nocompatible

" modelines
set modelines=5

" pathogen.vim ftw
filetype off
call pathogen#incubate()
call pathogen#helptags()
execute pathogen#infect()

" set the title in xterm
set title

" better buffer management
set hidden

" fixup backspace behavior
set backspace=indent,eol,start

let mapleader = ","
set history=1000

" searching stuff
set hlsearch
set incsearch

" Make <C-L> clear highlight and redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

" ignore case only if there are no upcase letters in the search
set ignorecase
set smartcase

" <tab> completion for filenames
set wildmenu
set wildmode=list:longest
set complete-=i

" turn syntax highlighting on
syntax on

" 256 colors, colorscheme
set t_Co=256
colorscheme xorium
set vb t_vb=

filetype plugin indent on
set ruler

" Trailling spaces and tabs
set list
set listchars=tab:>-,trail:*,nbsp:*

set fileformat=unix
set nobackup

" Status Line
set statusline=%F%m%r%h%w\ [f:%{&ff}\ t:%Y]\ [A:\%03.3b\ H:\%02.2B]\ [P:%04l,%04v][%p%%]\ [LEN=%L]\ %{fugitive#statusline()}
set laststatus=2

" use bash so that rvm works
set shell=bash

" NT bindings
map <leader>n :NERDTreeToggle<CR>
map <leader>ntm :NERDTreeMirror<CR>
map <leader>ntc :NERDTreeClose<CR>
map <leader>ntf :NERDTreeFind<CR>

" disable ex mode
:map Q <Nop>

" disable ri check
:map K <Nop>

" Align bindings
" map <leader>a= to :Align = (rather than :Align := )
map <leader>a= :Align =<CR>
map <leader>ah :Align =><CR>
map <leader>a# :Align #<CR>
map <leader>a{ :Align {<CR>
map <leader>A :Align [A-Z].*<CR>:'<,'>s/\s*$//<CR><C-l>
map <leader>= ggVG=<CR>
map <leader>ct :set et <bar> retab<CR>

" Helpers
map <leader>rts %s/\v\s+$//g<CR>
map <leader>srt :!sort<CR>

" Ruby
map <leader>rs :!ruby -c %:p<CR>
map <leader>r19 :s/\v:([0-9a-z_]+)\s+\=\>\s+/\1: /g<CR>
map <leader>r18 :s/\v([0-9a-z_"']+):\s+(.*)/:\1 => \2/g<CR>

" Haml
map <leader>hs :!haml -c %:p<CR>

" Set minimum window height
set winheight=10

" ctags stuff
set tags=./tags,tags,./TAGS,TAGS

" numbers
set number

" gui stuff
set guioptions-=T
set guioptions-=r
set guioptions-=L

" Movement
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <A-s> <C-w>s
nnoremap <A-q> <C-w>q
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
"nnoremap <C-l> <C-w>l

" grep
map <leader>a :Ack<space>
map <leader>a* :Ack<space><cword><CR>


" ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log,.git,*/bundle/*
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
map <leader>f :CtrlP<CR>
map <leader>g :CtrlPBuffer<CR>
map <leader>cf :CtrlPClearCache<CR>

" fuckups
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Wa ((getcmdtype() is# ':' && getcmdline() is# 'Wa')?('wa'):('Wa'))
cnoreabbrev <expr> Wqa ((getcmdtype() is# ':' && getcmdline() is# 'Wqa')?('wqa'):('Wqa'))
cnoreabbrev <expr> E ((getcmdtype() is# ':' && getcmdline() is# 'E')?('e'):('E'))

" zsh and vim don't get along
set shell=bash

" Save files when vim loses focus
au FocusLost * silent! wa

" tabs are spaces
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set cursorline

" create parent directories on write
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" vim rspec mappings
let g:rspec_runner = "os_x_iterm"
let g:rspec_command = "rff {spec}"
map <Bslash>t :call RunCurrentSpecFile()<CR>
map <Bslash>s :call RunNearestSpec()<CR>
map <Bslash>l :call RunLastSpec()<CR>
map <Bslash>a :call RunAllSpecs()<CR>

"nnoremap <silent> <esc> :noh<cr><esc>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>l <Plug>(EasyAlign)

set shortmess=a
set cmdheight=2

let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

set makeprg="make -j9"
nnoremap <Leader>M :make!<CR>

" airline
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline_left_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_sep=''
let g:airline_right_alt_sep=''

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }


" go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Tagbar
map <leader>tt :TagbarToggle<cr>

if has("autocmd")
augroup filetype_ruby
  autocmd!
  autocmd FileType ruby set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
augroup END

augroup straggelers
  " remove trailing spaces
  autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :%s/\s\+$//e
  " remove trailing whitespace automatically
  autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :set et | retab

augroup filetype_haml
  autocmd!
  autocmd FileType haml set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
augroup END

augroup filetype_yaml
  autocmd!
  autocmd FileType yaml set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
augroup END

augroup filetype_perl
  autocmd!
  autocmd FileType perl set tabstop=8|set shiftwidth=8|set noexpandtab|set nolist
augroup END

augroup filetype_go
  autocmd!

  autocmd FileType go set tabstop=4|set shiftwidth=4|set expandtab|set autoindent|set nolist

  autocmd FileType go nmap <Leader>dc  <Plug>(go-doc)
  autocmd FileType go nmap <Leader>ce  <Plug>(go-callees)
  autocmd FileType go nmap <Leader>cl  <Plug>(go-callers)
  autocmd FileType go nmap <Leader>cs  <Plug>(go-callstack)
  autocmd FileType go nmap <Leader>d   <Plug>(go-describe)
  autocmd FileType go nmap <Leader>in  <Plug>(go-info)
  autocmd FileType go nmap <Leader>ii  <Plug>(go-implements)
  autocmd FileType go nmap <Leader>r   <Plug>(go-referrers)
  autocmd FileType go nmap <Leader>f   :GoImports<CR>


augroup END
endif
